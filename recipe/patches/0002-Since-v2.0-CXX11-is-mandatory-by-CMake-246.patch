From af146892cf1769c5488d14a9f1706b72ee25d2c2 Mon Sep 17 00:00:00 2001
From: Nicolas Cornu <nicolas.cornu@epfl.ch>
Date: Mon, 11 Nov 2019 13:39:35 +0100
Subject: [PATCH 02/10] Since v2.0 CXX11 is mandatory by CMake (#246)

* Since v2.0 CXX11 is mandatory by CMake.
---
 include/highfive/H5PropertyList.hpp           | 13 ++-----------
 include/highfive/bits/H5Dataspace_misc.hpp    |  2 --
 include/highfive/bits/H5PropertyList_misc.hpp |  2 --
 include/highfive/bits/H5Utils.hpp             |  8 --------
 4 files changed, 2 insertions(+), 23 deletions(-)

diff --git a/include/highfive/H5PropertyList.hpp b/include/highfive/H5PropertyList.hpp
index 84ec7e5..2c9f995 100644
--- a/include/highfive/H5PropertyList.hpp
+++ b/include/highfive/H5PropertyList.hpp
@@ -45,10 +45,10 @@ class PropertyList {
   public:
     ~PropertyList();
 
-#ifdef H5_USE_CXX11
+    PropertyList(const PropertyList<T>&) = delete;
+    PropertyList& operator=(const PropertyList<T>&) = delete;
     PropertyList(PropertyList&& other);
     PropertyList& operator=(PropertyList&& other);
-#endif
     constexpr PropertyType getType() const { return T; }
 
     hid_t getId() const { return _hid; }
@@ -70,15 +70,6 @@ class PropertyList {
     void _initializeIfNeeded();
 
     hid_t _hid;
-
-  private:
-#ifdef H5_USE_CXX11
-    PropertyList(const PropertyList<T>&) = delete;
-    PropertyList& operator=(const PropertyList<T>&) = delete;
-#else
-    PropertyList(const PropertyList<T>&);
-    PropertyList& operator=(const PropertyList<T>&);
-#endif
 };
 
 typedef PropertyList<PropertyType::FILE_CREATE> FileCreateProps;
diff --git a/include/highfive/bits/H5Dataspace_misc.hpp b/include/highfive/bits/H5Dataspace_misc.hpp
index 740ff27..a91c43f 100644
--- a/include/highfive/bits/H5Dataspace_misc.hpp
+++ b/include/highfive/bits/H5Dataspace_misc.hpp
@@ -131,7 +131,6 @@ inline std::vector<size_t> DataSpace::getMaxDimensions() const {
 template <typename ScalarValue>
 inline DataSpace DataSpace::From(const ScalarValue& scalar) {
     (void)scalar;
-#if H5_USE_CXX11
     static_assert(
         (std::is_arithmetic<ScalarValue>::value ||
          std::is_enum<ScalarValue>::value ||
@@ -148,7 +147,6 @@ inline DataSpace DataSpace::From(const ScalarValue& scalar) {
         "boost::multi_array<all_basic_types> \n"
         "  all_supported_types = all_basic_types | stl_container_types | "
         "boost_container_types");
-#endif
     return DataSpace(DataSpace::datascape_scalar);
 }
 
diff --git a/include/highfive/bits/H5PropertyList_misc.hpp b/include/highfive/bits/H5PropertyList_misc.hpp
index 3d70617..969526d 100644
--- a/include/highfive/bits/H5PropertyList_misc.hpp
+++ b/include/highfive/bits/H5PropertyList_misc.hpp
@@ -60,7 +60,6 @@ template <PropertyType T>
 inline PropertyList<T>::PropertyList()
     : _hid(H5P_DEFAULT) {}
 
-#ifdef H5_USE_CXX11
 template <PropertyType T>
 inline PropertyList<T>::PropertyList(PropertyList<T>&& other)
     : _hid(other._hid) {
@@ -75,7 +74,6 @@ inline PropertyList<T>& PropertyList<T>::operator=(PropertyList<T>&& other) {
     _hid = hid;
     return *this;
 }
-#endif
 
 template <PropertyType T>
 inline PropertyList<T>::~PropertyList() {
diff --git a/include/highfive/bits/H5Utils.hpp b/include/highfive/bits/H5Utils.hpp
index 45c0db2..a45d72c 100644
--- a/include/highfive/bits/H5Utils.hpp
+++ b/include/highfive/bits/H5Utils.hpp
@@ -26,14 +26,6 @@
 
 #include <H5public.h>
 
-#ifndef H5_USE_CXX11
-#if ___cplusplus >= 201103L
-#define H5_USE_CXX11 1
-#else
-#define H5_USE_CXX11 0
-#endif
-#endif
-
 namespace HighFive {
 
 namespace details {
-- 
2.21.0 (Apple Git-122.2)

